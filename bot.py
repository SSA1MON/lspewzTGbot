import sqlite3
import telebot.types
import buttons
import func

from telebot import types, TeleBot
from config import TOKEN
from time import sleep

bot = TeleBot(token=TOKEN, parse_mode='Markdown')
conn = sqlite3.connect(database='database.db', check_same_thread=False)
cursor = conn.cursor()


@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
    """

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton(text=buttons.add_cash)
    btn2 = types.KeyboardButton(text=buttons.check_salary)
    markup.add(btn1, btn2)

    # —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    bot.set_my_commands([telebot.types.BotCommand("/start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")])

    # —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–¥, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    func.DatabaseData(msg=message, user=message.from_user.id).db_month_column()

    bot.send_message(chat_id=message.chat.id, text=f"Wassup, *{message.from_user.first_name}*!", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def main(message: telebot.types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é, –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º (/start)
    """

    user_id = message.from_user.id
    if message.text == buttons.add_cash:
        markup = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton("–ü–µ—Ä–≤–∏—á–∫–∞", callback_data=f'{buttons.pervichka}|{user_id}')
        button2 = types.InlineKeyboardButton("–ì–∞—Ä–∞–Ω—Ç–∏—è", callback_data=f'{buttons.garant}|{user_id}')
        button3 = types.InlineKeyboardButton("–•–æ–ª–æ–¥", callback_data=f'{buttons.holod}|{user_id}')
        button4 = types.InlineKeyboardButton("–ê—Ä—Ç—ë–º", callback_data=f'{buttons.artem}|{user_id}')
        button5 = types.InlineKeyboardButton("–ß–∏—Å—Ç—ã–µ –¥–µ–Ω—å–≥–∏", callback_data=f'{buttons.clean_money}|{user_id}')
        button6 = types.InlineKeyboardButton("–ù–µ–ø—Ä–æ—Ñ–∏–ª—å", callback_data=f'{buttons.non_profile}|{user_id}')
        markup.add(button1, button2, button3, button4, button5, button6)
        bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=markup)

    elif message.text == buttons.check_salary:
        markup = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data=f'january|{user_id}')
        button2 = types.InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å", callback_data=f'february|{user_id}')
        button3 = types.InlineKeyboardButton("–ú–∞—Ä—Ç", callback_data=f'march|{user_id}')
        button4 = types.InlineKeyboardButton("–ê–ø—Ä–µ–ª—å", callback_data=f'april|{user_id}')
        button5 = types.InlineKeyboardButton("–ú–∞–π", callback_data=f'may|{user_id}')
        button6 = types.InlineKeyboardButton("–ò—é–Ω—å", callback_data=f'june|{user_id}')
        button7 = types.InlineKeyboardButton("–ò—é–ª—å", callback_data=f'july|{user_id}')
        button8 = types.InlineKeyboardButton("–ê–≤–≥—É—Å—Ç", callback_data=f'august|{user_id}')
        button9 = types.InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å", callback_data=f'september|{user_id}')
        button10 = types.InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å", callback_data=f'october|{user_id}')
        button11 = types.InlineKeyboardButton("–ù–æ—è–±—Ä—å", callback_data=f'november|{user_id}')
        button12 = types.InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å", callback_data=f'december|{user_id}')
        markup.add(button1, button2, button3, button4, button5, button6,
                   button7, button8, button9, button10, button11, button12)
        bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü üëá", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É.")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call: telebot.types.CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ main().
    """
    try:
        month = call.data.split('|')[0]
        user_id = call.data.split('|')[1]
        if call.message:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)

            if call.data.startswith(('january', 'february', 'march', 'april', 'may', 'june', 'july', 'august',
                                     'september', 'october', 'november', 'december')):
                total_salary = func.DatabaseData(msg=call.message, user=user_id, month=month).db_get_total_sum()

                if total_salary is not None:
                    month = func.month_dict.get(month, {})
                    bot.send_message(chat_id=call.message.chat.id,
                                     text=f"–¶–∏—Ñ—Ä—ã –∑–∞ *{month.upper()}:*\n\n"
                                          f"*‚ö° –ü–µ—Ä–≤–∏—á–∫–∞:*        {total_salary[0][0]}\n"
                                          f"*‚ö° –ì–∞—Ä–∞–Ω—Ç:*        {total_salary[0][1]}\n"
                                          f"*‚ö° –•–æ–ª–æ–¥:*     {total_salary[0][2]}\n"
                                          f"*‚ö° –ê—Ä—Ç—ë–º:*     {total_salary[0][3]}\n"
                                          f"*‚ö° –ß–∏—Å—Ç—ã–µ:*        {total_salary[0][4]}\n"
                                          f"*‚ö° –ù–µ–ø—Ä–æ—Ñ–∏–ª—å:*     {total_salary[0][5]}\n\n"
                                          f"*–ò–¢–û–ì–û:*     {total_salary[1]} RUB")
                else:
                    bot.send_message(chat_id=call.message.chat.id, text="üíæ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                return None

            selected_button = None
            bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏ —Å—É–º–º—É üëá")

            if call.data.startswith(buttons.pervichka):
                selected_button = buttons.pervichka
            elif call.data.startswith(buttons.garant):
                selected_button = buttons.garant
            elif call.data.startswith(buttons.holod):
                selected_button = buttons.holod
            elif call.data.startswith(buttons.artem):
                selected_button = buttons.artem
            elif call.data.startswith(buttons.clean_money):
                selected_button = buttons.clean_money
            elif call.data.startswith(buttons.non_profile):
                selected_button = buttons.non_profile

            func.DatabaseData(msg=call.message, btn=selected_button, user=user_id).db_update_button()
            bot.register_next_step_handler(message=call.message, callback=func.answer_handler)

    except Exception as ex:
        bot.send_message(chat_id=call.message.chat.id, text=f"–û—à–∏–±–∫–∞ –≤ callback_inline: {ex}")


if __name__ == '__main__':
    while True:
        try:
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception:
            bot.close()
            sleep(15)
            continue
